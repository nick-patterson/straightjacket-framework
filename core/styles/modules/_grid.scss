// ------   Grid Module   ------------------- /
// ------------------------------------------ /


@mixin PSJGrid($config: ()) {


	// ------   Registration   -------------- /

	$registration: register-module(grid, #{&});


	// ------   Default Configuration   ----- /

	$config: map-merge((
		class: '',
		columns: 12,
		restrictColumns: false,
		gutter: $base * 4,
		type: 'block',
		includePushes: true,
		restrictPushes: false
	), $config);

	$id: unique-id();
	$columns: map-get($config, columns);
	$restrictedColumns: map-get($config, restrictColumns);
	$restrictedPushes: map-get($config, restrictedPushes);

	// ------   Generated CSS   ------------- /

	@at-root {

		// Main grid

		%#{$id}_grid {
			clear: both;
		}

		%#{$id}_blockGrid {
			@include clearfix();
		}

		& {
			margin-left: map-get($config, gutter) * -1;

			@extend %#{$id}_grid;

			@if (map-get($config,type) == inline) {
				@extend %#{$id}_inlineGrid;
			}

			@else {
				@extend %#{$id}_blockGrid;
			}

			// User-generated styling

			@content;
		}


		// Rows

		%#{$id}_row {
			clear: both;

			@include clearfix();
		}

		&__row {
			@extend %#{$id}_row;
		}


		// Columns

		%#{$id}_column {
			padding-left: map-get($config, gutter);
		}
		%#{$id}_floatColumn {
			float: left;
		}
		%#{$id}_inlineColumn {
			display: inline-block;
			font-size: $textBase * 1;
			vertical-align: top;
		}

		&__column {

			@extend %#{$id}_column;

			// Default columns (used for mobile devices & other tiny screens)

			@for $i from 1 through $columns {

				&--#{ $i } {

					width: ((100 / $columns) * $i) * 1%;

					@if (map-get($config, type) == inline) {
						@extend %#{$id}_inlineColumn;
					}

					@else {
						@extend %#{$id}_floatColumn;
					}
				}
			}

			// Columns for other screen sizes

			@each $breakpointLabel, $propMap in $breakpointMap {

				@if $breakpointLabel != default {

					@media screen and (min-width: map-get($propMap, viewportWidth)) {

						@for $i from 1 through $columns {

							@at-root {
								// Dynamc placeholder
								%#{$id}-column-#{ $i }-#{ $breakpointLabel } {
									width: ((100 / $columns) * $i) * 1%;
								}
							}

							@for $c from 1 through $columns {

								&--#{ $i }.#{ $breakpointLabel }--#{ $c } {
									@extend %#{$id}-column-#{ $c }-#{ $breakpointLabel };
								}
							}
						}
					}
				}
			}

			// Pushes

			@if map-get($config, includePushes) {

				@for $i from 1 through ($columns - 1) {

					@at-root {
						// Dynamc placeholder
						%#{$id}-column-#{ $i }-push-#{ $i } {
							margin-left: ((100 / $columns) * $i) * 1%;
						}
					}

					@for $c from 1 through ($columns - 1) {

						&--#{ $c }.#{ push }--#{ $i } {
							@extend %#{$id}-column-#{ $i }-push-#{ $i };
						}
					}
				}
			}

			// Helpers (Linked with structure helpers)

			@if (length(map-get($PSJModuleRegistry, structureHelpers))) {

				$helperBlock: nth(map-get($PSJModuleRegistry, structureHelpers), 1);

				@for $i from 1 through $columns {

					&--#{ $i + $helperBlock }--float-left {
						@extend %psj_floatLeft;
					}

					&--#{ $i + $helperBlock }--float-right {
						@extend %psj_floatRight;
					}

					&--#{ $i + $helperBlock }--clear-left {
						@extend %psj_clearLeft;
					}

					&--#{ $i + $helperBlock }--clear-right {
						@extend %psj_clearRight;
					}

					&--#{ $i + $helperBlock }--clear-both {
						@extend %psj_clearBoth;
					}

					&--#{ $i + $helperBlock }--centered {
						@extend %psj_centered;
					}
				}
			}
		}
	}
}
