// ------   Text Sizing Module   ------------ /
// ------------------------------------------ /


@mixin PSJ_text-sizing($config: ()) {

	// ------   Default Configuration   ----- /

	$config: map-merge((
		breakpoint-map: $PSJ_breakpoint-map,
		text-map: $PSJ_text-map
	), $config);


	// ------   Registration   -------------- /

	$registration: PSJ_register-module(text-sizing, #{&}, $config);


	// ------   Generated CSS   ------------- /

	@at-root {

		@each $element, $prop-map in map-get($config, textMap) {

			// Get default element for size treatment
			$default-element: map-get($prop-map, defaultElement);

			// Construct selector
			$selector: &--#{$element + if($default-element, ' ,' + $default-element, '')};

			// Rendered
			#{$selector} {

				@each $breakpoint, $css-prop-map in map-get($prop-map, breakpoints) {

					// Defaults
					@if $breakpoint == default {

						@each $css-prop, $css-value in $css-prop-map {

							// Render with rem fallback
							@if type-of($css-value) == number and unit($css-value) == rem {
								@include PSJ_rem($css-prop, $css-value, default);
							}
							@else {
								#{$css-prop}: #{$css-value};
							}
						}
					}

					// Responsive
					@else {

						// Only print CSS if breakpoint exists in both the text map and the breakpoint map
						@if map-has-key(map-get($config, breakpoint-map), $breakpoint) {

							@media screen and (min-width: PSJ_map-deep-get($config, breakpoint-map, $breakpoint, viewport-width)) {

								@each $css-prop, $css-value in $css-prop-map {

									// Render with rem fallback
									@if type-of($css-value) == number and unit($css-value) == rem {
										@include PSJ_rem($css-prop, $css-value, default);
									}
									@else {
										#{$css-prop}: #{$css-value};
									}
								}
							}
						}

						@else {
							@warn 'You have breakpoints in your breakpoint map that do not exist in your text map or vice versa. Check to make sure this is what you want.';
						}
					}
				}
			}
		}
	}
}
