// ------   Text Sizing Module   ------------ /
// ------------------------------------------ /


@mixin PSJ_text-sizing($config: ()) {

	// ------   Default Configuration   ----- /

	$config: map-merge((
		breakpoint-map: $PSJ_breakpoint-map,
		text-map: $PSJ_text-map
	), $config);


	// ------   Registration   -------------- /

	$registration: PSJ_register-module(text-sizing, #{&}, $config);


	// ------   Generated CSS   ------------- /

	@at-root {

		@each $element, $prop-map in map-get($config, text-map) {

			// Get default element for size treatment
			$default-element: map-get($prop-map, default-element);

			// Construct selector
			$selector: &--#{$element + if($default-element, ' ,' + $default-element, '')};

			// Rendered
			#{$selector} {

				// Default text (for mobile and other tiny screen sizes)
				@each $css-prop, $css-value in PSJ_map-deep-get($prop-map, breakpoints, default) {

					// Render with rem fallback
					@if type-of($css-value) == number and unit($css-value) == rem {
						@include PSJ_rem($css-prop, $css-value, default);
					}
					@else {
						#{$css-prop}: #{$css-value};
					}
				}

				// Text for other screen sizes
				@each $breakpoint, $css-prop-map in map-get($prop-map, breakpoints) {

					// Only print CSS if breakpoint exists in both the text map and the breakpoint map
					@if map-has-key(map-get($config, breakpoint-map), $breakpoint) {

						@media screen and (min-width: PSJ_map-deep-get($config, breakpoint-map, $breakpoint)) {

							@each $css-prop, $css-value in $css-prop-map {

								// Render with rem fallback
								@if type-of($css-value) == number and unit($css-value) == rem {
									@include PSJ_rem($css-prop, $css-value, $breakpoint);
								}
								@else {
									#{$css-prop}: #{$css-value};
								}
							}
						}
					}
				}
			}
		}
	}
}
