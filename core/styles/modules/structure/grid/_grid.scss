// ------   Grid Module   ------------------- /
// ------------------------------------------ /


@mixin PSJGrid($config: ()) {

	// ------   Default Configuration   ----- /

	$config: map-merge((
		breakpointMap: $PSJ_breakpointMap,
		columns: 12,
		restrictColumns: false,
		gutter: $PSJ_base * 4,
		type: 'block',
		restrictPushes: false,
		includeHelpers: true
	), $config);

	$id: unique-id();
	$columns: map-get($config, columns);
	$restrictedColumns: map-get($config, restrictColumns);
	$restrictedPushes: map-get($config, restrictedPushes);


	// ------   Registration   -------------- /

	$registration: psj-register-module(grid, #{&}, $config);


	// ------   Generated CSS   ------------- /

	@at-root {

		// Main grid
		%#{$id}_grid {
			clear: both;
		}
		%#{$id}_blockGrid {
			@include clearfix();
		}
		%#{$id}_flexGrid {
			display: flex;
			flex-wrap: wrap;
		}

		& {
			margin-left: map-get($config, gutter) * -1;

			@extend %#{$id}_grid;

			@if (map-get($config,type) == flex) {
				@extend %#{$id}_flexGrid;
			}

			@else {
				@extend %#{$id}_blockGrid;
			}

			// User-generated styling
			@content;
		}

		// Main grid helpers
		@if map-get($config, includeHelpers) and psj-is-module-registered( flexhelpers ) and map-get($config, type) == 'flex' {
			&--justify-right {
				justify-content: right;
			}
		}


		// Rows
		%#{$id}_row {
			clear: both;

			@include clearfix();
		}
		&__row {
			@extend %#{$id}_row;
		}


		// Columns
		%#{$id}_column {
			padding-left: map-get($config, gutter);
		}
		%#{$id}_floatColumn {
			float: left;
		}
		%#{$id}_flexColumn {
		}

		&__column {

			@extend %#{$id}_column;

			@if (map-get($config, type) == flex) {
				@extend %#{$id}_flexColumn;
			}

			@else {
				@extend %#{$id}_floatColumn;
			}

			// Default columns (used for mobile devices & other tiny screens)
			$restrictColumns: map-get($config, restrictColumns);

			// Only run loops if configured correctly
			@if $restrictColumns == false or type-of($restrictColumns) == 'list' {

				@for $i from 1 through $columns {

					// Only output CSS if index is in restrictedColumns list
					@if $restrictColumns == false or index($restrictColumns, $i) {

						&--#{ $i } {
							width: ((100 / $columns) * $i) * 1%;
						}
					}
				}

				// Columns for other screen sizes
				@each $breakpointLabel, $propMap in map-get($config, breakpointMap) {

					@if $breakpointLabel != default {

						@media screen and (min-width: map-get($propMap, viewportWidth)) {

							@for $i from 1 through $columns {

								// Only allocate placeholder if index is in restrictColumns list
								@if $restrictColumns == false or index($restrictColumns, $i) {

									@at-root {

										// Dynamc placeholder
										%#{$id}-column-#{ $i }-#{ $breakpointLabel } {
											width: ((100 / $columns) * $i) * 1%;
										}
									}

									@for $c from 1 through $columns {

										// Only output CSS if both indicies is in restrictedColumns list
										@if $restrictColumns == false or index($restrictColumns, $c) {

											&--#{ $c + \@ + $breakpointLabel } {
												@extend %#{$id}-column-#{ $c }-#{ $breakpointLabel };
											}
										}
									}
								}
							}
						}
					}
				}
			}

			// Pushes
			$restrictPushes: map-get($config, restrictPushes);

			// Only run loop if configured correctly
			@if $restrictPushes == false or type-of($restrictPushes) == 'list' {

				@for $i from 1 through ($columns - 1) {

					// Only output CSS if index is in restrictedPushes list
					@if $restrictPushes == false or index($restrictPushes, $i) {

						@at-root {

							// Dynamc placeholder
							%#{$id}-column-#{ $i }-push-#{ $i } {
								margin-left: ((100 / $columns) * $i) * 1%;
							}
						}

						@for $c from 1 through ($columns - 1) {

							&--#{ $c }.#{ push }--#{ $i } {
								@extend %#{$id}-column-#{ $i }-push-#{ $i };
							}
						}
					}
				}
			}

			// Column Helpers

			// Block helpers (linked with stricture helpers module)
			@if map-get($config, includeHelpers) and map-get($config, type) != 'flex' and psj-is-module-registered( blockHelpers ) {

				$helperBlock: psj-get-module-namespace(blockHelpers, 1);

				@for $i from 1 through $columns {

					// Only output CSS if index is in restrictedColumns list
					@if $restrictColumns == false or index($restrictColumns, $i) {

						&--#{ $i + $helperBlock }--float-left {
							@extend %psj_floatLeft;
						}

						&--#{ $i + $helperBlock }--float-right {
							@extend %psj_floatRight;
						}

						&--#{ $i + $helperBlock }--centered {
							@extend %psj_centered;
						}
					}
				}
			}
		}
	}
}
