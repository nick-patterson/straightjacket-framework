// ------   Grid Module   -------------------------- /
// ------------------------------------------------- /


@mixin PSJ_grid($config: ()) {

	// ------   Default Configuration   ------------ /

	$config: map-merge((
		columns: 12,
		gutter: $PSJ_base * 4,
		include-columns: true,
		include-pushes: false,
		include-responsive-classes: true,
		breakpoint-map: $PSJ_breakpoint-map,
	), $config);

	$id: unique-id();

	// Get column count
	$columns: map-get($config, columns);

	// Normalize included columns, pushes, and responsive classes
	$include-columns: map-get($config, include-columns);
	$include-pushes: map-get($config, include-pushes);


	// ------   Registration   --------------------- /

	$registration: PSJ_register-module(grid, #{&}, $config);


	// ------   Generated CSS   -------------------- /

	@at-root {

		// Placeholder for grid-like classes
		%#{$id}_grid-like {
			display: flex;
			flex-wrap: wrap;
		}

		// The grid itself
		& {
			@extend %#{$id}_grid-like;
			margin-left: map-get($config, gutter) * -1;

			// User-generated styling
			@content;
		}

		// Rows
		&__row {
			@extend %#{$id}_grid-like;
		}

		// Columns
		%#{$id}_column {
			padding-left: map-get($config, gutter);
		}

		&__column {

			@extend %#{$id}_column;

			// Only run loops if columns are included
			@if $include-columns == true or type-of($include-columns) == 'list' {

				// Default columns (used for mobile devices & other tiny screens)
				@for $i from 1 through $columns {

					// Only output CSS if index is in restrictedColumns list
					@if $include-columns == true or index($include-columns, $i) {

						&--#{ $i } {
							width: ((100 / $columns) * $i) * 1%;
						}
					}
				}

				// Columns for other screen sizes
				@each $breakpoint-label, $viewport-width in map-get($config, breakpoint-map) {

					@media screen and (min-width: $viewport-width) {

						@for $i from 1 through $columns {

							// Only output column if index is in include-columns list
							@if $include-columns == true or index($include-columns, $i) {

								&--#{ $i + \@ + $breakpoint-label } {
									width: ((100 / $columns) * $i) * 1%;
								}
							}
						}
					}
				}
			}

			// Default Pushes

			// Only run loop if pushes are included
			@if $include-pushes == true or type-of($include-pushes) == 'list' {

				// Default pushes (used for mobile devices & other tiny screens)
				@for $i from 1 through ($columns - 1) {

					// Only output CSS if index is in restrictedPushes list
					@if $include-pushes == true or index($include-pushes, $i) {

						&--#{ push }-#{ $i } {
							margin-left: ((100 / $columns) * $i) * 1%;
						}
					}
				}
			}
		}
	}
}
