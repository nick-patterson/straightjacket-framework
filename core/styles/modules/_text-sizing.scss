// ------   Text Sizing Module   ------------ /
// ------------------------------------------ /


@mixin PSJTextSizing($config: ()) {

	// ------   Default Configuration   ----- /

	$config: map-merge((
		namespace: '',
		breakpointMap: $PSJ_breakpointMap,
		textMap: $PSJ_textMap,
		renderAsExtendable: false
	), $config);



	// ------   Generated CSS   ------------- /

	@at-root {

		@each $element, $propMap in map-get($config, textMap) {

			// Get default element for size treatment
			$defaultElement: map-get($propMap, defaultElement);

			// Construct selector
			$selector: &--#{$element + if($defaultElement, ' ,' + $defaultElement, '')};

			// Rendered
			#{$selector} {

				@each $breakpoint, $cssPropMap in map-get($propMap, breakpoints) {

					// Defaults
					@if $breakpoint == default {

						@each $cssProp, $cssValue in $cssPropMap {

							// Render with rem fallback
							@if type-of($cssValue) == number and unit($cssValue) == rem {
								@include rem($cssProp, $cssValue, default);
							}
							@else {
								#{$cssProp}: #{$cssValue};
							}
						}
					}

					// Responsive
					@else {

						// Only print CSS if breakpoint exists in both the text map and the breakpoint map
						@if map-has-key(map-get($config, breakpointMap), $breakpoint) {

							@media screen and (min-width: map-deep-get($config, breakpointMap, $breakpoint, viewportWidth)) {

								@each $cssProp, $cssValue in $cssPropMap {

									// Render with rem fallback
									@if type-of($cssValue) == number and unit($cssValue) == rem {
										@include rem($cssProp, $cssValue, default);
									}
									@else {
										#{$cssProp}: #{$cssValue};
									}
								}
							}
						}

						@else {
							@warn 'You have breakpoints in your breakpoint map that do not exist in your text map or vice versa. Check to make sure this is what you want.';
						}
					}
				}
			}
		}
	}
}
