// ------   Text Sizing Module   ------------ /
// ------------------------------------------ /


@mixin text-sizing($config: ()){

	// ------   Default Configuration   ----- /

	$config: map-merge((
		class: '',
		breakpointMap: $breakpointMap,
		textMap: $textMap
	), $config);


	// ------   Generated CSS   ------------- /

	// Default

	@each $selector, $propMap in map-deep-get($config, textMap, default) {

		// Add a specific class selector to the selector in the text map if one is specified
		$selector: if(map-get($config, class) == '', $selector, $selector + '.' + map-get($config, class));
		
		#{$selector} {
			@each $prop, $value in $propMap {
				#{$prop}: #{$value};
			}
		}
	}

	// Responsive

	// Warn the user if the breakpoints in their respective breakpoint and text maps do not have a 1:1 relationship
	@each $breakpoint, $breakpointPropMap in map-get($config, breakpointMap) {

		$differentBreakpoints: false;

		@if (not map-has-key(map-get($config, textMap), $breakpoint)) {
			$differentBreakpoints: true;
		}

		@if ($differentBreakpoints) {
			@warn 'You have breakpoints in your breakpoint map that do not exist in your text map or vice versa. Check to make sure this is what you want.';
		}
	}

	@each $breakpoint, $breakpointPropMap in map-get($config, breakpointMap) {

		@media screen and (max-width: map-get($breakpointPropMap, viewportWidth)) {

			// Only print the CSS if the breakpoint exists
			@if (map-has-key(map-get($config, textMap), $breakpoint)) {
				@each $selector, $propMap in map-deep-get($config, textMap, $breakpoint) {

					// Add a specific class selector to the selector in the text map if one is specified				
					$selector: if(map-get($config, class) == '', $selector, $selector + '.' + map-get($config, class));
			
					#{$selector} {
						@each $prop, $value in $propMap {
							#{$prop}: #{$value};
						}
					}
				}
			}
		}
	}	
}