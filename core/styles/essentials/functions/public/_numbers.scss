// ================================================= /
// ======   Public Number Functions   ============== /
// ================================================= /


// ------   Genera number functions   -------------- /

// Strip unit from a number
@function PSJ_strip-unit($quantity) {
	@return $quantity / ($quantity * 0 + 1);
}


// ------   Mathematics functions   ---------------- /

// Exponentiation
// Supports only integers as exponents for now
@function PSJ_pow($base, $exponent) {

	// Srt error cases
	$error-cases: (
		(
			conditional: type_of($base) != number or type_of($exponent) != number or not unitless($base) or not unitless($exponent),
			description: 'Both arguments must be unitless numbers'
		),
		(
			conditional: round($exponent) != $exponent,
			description: '$exponent must be an integer'
		)
	);

	// If there are errors, return the base
	@if PSJ_has-errors('PSJ_pow', $error-cases) {
		@return $base;
	}

	// Otherwise, do the thing
	@else {

		// If the exponent is 0, return 1
		@if $exponent == 0 {
			@return 1;
		}

		// If the exponent is 1, return the base
		@else if $exponent == 1 {
			@return $base;
		}

		// If the exponent is between 0 and 1, do the lns
		@else if $exponent > 0 and $exponent < 1 {
			@return ln($exponent * ln($base));
		}

		// Otherwise, do a traditional exponentiation
		@else {

			// Set result
			$result: $base;

			// Multiply result by itself $exponent times
			@for $i from 1 to abs($exponent) {
				$result: $result * $base;
			}

			// If the exponent is negative, return inverse of result
			@if $exponent < 0 {
				@return 1 / ($result);
			}

			// Otherwise, return the result
			@else {
				@return $result;
			}
		}
	}
}


// Natural Logarithms
// Who in the hell thought it would ever come to needing Taylor series expansion in sass!?
@function PSJ_ln($x) {

	@if type_of($x) != number or not unitless($x) {
		@warn 'Argument must be a unitless number';
		@return $b;
	}

	$originalx: $x;

	@if abs($x) > 1 {
		$x: 1 / $x;
	}

	$t: $x - 1;

	$y: $t;

	@for $i from 2 to round($x + 150) {
		@if $i % 2 != 0 {
			$y: $y + (PSJ_pow($t, $i) / $i);
		}

		@else {
			$y: $y - (PSJ_pow($t, $i) / $i);
		}
	}

	@if abs($originalx) > 1 {
		@return $y * -1;
	}

	@else {
		@return $y;
	}
}


// Round decimals
@function PSJ_round-decimal($number, $places: 0, $mode: round) {

	$n: 1;

	// $number must be a number
	@if type-of($number) != number {
		@warn '#{ $number } must be a number';
		@return $number;
	}

	// $places must be a unitless number
	@if type-of($places) != number or not unitless($places) {
		@warn '#{ $places } must be a unitless number';
		@return $number;
	}

	@for $i from 1 through $places {
		$n: $n * 10;
	}

	@if $mode == round {
		@return round($number * $n) / $n;
	}

	@else if $mode == ceil {
		@return ceil($number * $n) / $n;
	}

	@else if $mode == floor {
		@return floor($number * $n) / $n;
	}

	@else {
		@warn '#{ $mode } is not a recognized mode of rounding.';
		@return $number;
	}
}
