// ================================================= /
// ======   Public Number Functions   ============== /
// ================================================= /


// ------   General number functions   ------------- /

// Casts anything into a number
// By Hugo Giraudel
@function PSJ_to-number($value: null) {

	// Set up error cases
	$error-cases: (
		(
			conditional: $value == null,
			description: '$value must not be null'
		)
	);

	// If there are errors, return null
	@if PSJ_has-errors('PSJ_to-number', $error-cases) {
		@return null;
	}

	// If the value is already a number, return it
	@if type-of($value) == number {
		@return $value;
	}

	// Otherwise, if the value is a list or a map, return the length
	@if type-of($value) == list or type-of($value) == map {
		@return length($value);
	}

	// Otherwise, set vars
	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	// Begin Hugo magic and loop through each character in the value
	@for $i from if($minus, 2, 1) through str-length($value) {

		// Get the current character
		$character: str-slice($value, $i, $i);

		// ????
		@if not (index(map-keys($numbers), $character) or $character == '.') {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i));
		}

		@if $character == '.' {
			$digits: 1;
		}

		@else if $digits == 0 {
			$result: $result * 10 + map-get($numbers, $character);
		}

		@else {
			$digits: $digits * 10;
			$result: $result + map-get($numbers, $character) / $digits;
		}
	}

	// Profit
	@return if($minus, -$result, $result);
}


// Strip unit from a number
@function PSJ_strip-unit($quantity) {
	@return $quantity / ($quantity * 0 + 1);
}


// Add a unit to a number
// By Hugo Giraudel
@function PSJ_to-length($value, $unit) {

	// Set list of units
	$units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

	// Set error cases
	$error-cases: (
		(
			conditional: not index(map-keys($units), $unit),
			description: 'Invalid $unit'
		)
	);

	// If there are errors, return 0
	@if PSJ_has-errors('PSJ_to-length', $error-cases) {
		@return 0;
	}

	// Otherwise, return the value appended with the unit
	@return $value * map-get($units, $unit);
}


// ------   Mathematics functions   ---------------- /

// Exponentiation
// Supports only integers as exponents for now
@function PSJ_pow($base, $exponent) {

	// Set error cases
	$error-cases: (
		(
			conditional: type_of($base) != number or type_of($exponent) != number or not unitless($base) or not unitless($exponent),
			description: 'Both arguments must be unitless numbers'
		),
		(
			conditional: round($exponent) != $exponent,
			description: '$exponent must be an integer'
		)
	);

	// If there are errors, return the base
	@if PSJ_has-errors('PSJ_pow', $error-cases) {
		@return $base;
	}

	// Otherwise, do the thing
	@else {

		// If the exponent is 0, return 1
		@if $exponent == 0 {
			@return 1;
		}

		// If the exponent is 1, return the base
		@else if $exponent == 1 {
			@return $base;
		}

		// If the exponent is between 0 and 1, do the lns
		@else if $exponent > 0 and $exponent < 1 {
			@return ln($exponent * ln($base));
		}

		// Otherwise, do a traditional exponentiation
		@else {

			// Set result
			$result: $base;

			// Multiply result by itself $exponent times
			@for $i from 1 to abs($exponent) {
				$result: $result * $base;
			}

			// If the exponent is negative, return inverse of result
			@if $exponent < 0 {
				@return 1 / ($result);
			}

			// Otherwise, return the result
			@else {
				@return $result;
			}
		}
	}
}


// Natural Logarithms
// Who in the hell thought it would ever come to needing Taylor series expansion in sass!?
@function PSJ_ln($x) {

	@if type_of($x) != number or not unitless($x) {
		@warn 'Argument must be a unitless number';
		@return $b;
	}

	$originalx: $x;

	@if abs($x) > 1 {
		$x: 1 / $x;
	}

	$t: $x - 1;

	$y: $t;

	@for $i from 2 to round($x + 150) {
		@if $i % 2 != 0 {
			$y: $y + (PSJ_pow($t, $i) / $i);
		}

		@else {
			$y: $y - (PSJ_pow($t, $i) / $i);
		}
	}

	@if abs($originalx) > 1 {
		@return $y * -1;
	}

	@else {
		@return $y;
	}
}


// Round decimals
@function PSJ_round-decimal($number, $places: 0, $mode: round) {

	$n: 1;

	// $number must be a number
	@if type-of($number) != number {
		@warn '#{ $number } must be a number';
		@return $number;
	}

	// $places must be a unitless number
	@if type-of($places) != number or not unitless($places) {
		@warn '#{ $places } must be a unitless number';
		@return $number;
	}

	@for $i from 1 through $places {
		$n: $n * 10;
	}

	@if $mode == round {
		@return round($number * $n) / $n;
	}

	@else if $mode == ceil {
		@return ceil($number * $n) / $n;
	}

	@else if $mode == floor {
		@return floor($number * $n) / $n;
	}

	@else {
		@warn '#{ $mode } is not a recognized mode of rounding.';
		@return $number;
	}
}
