// ================================================= /
// ======   Public Functions   ===================== /
// ================================================= /


// ------   Strip Units    ------------------------- /

@function strip-unit($quantity) {
	@return $quantity / ($quantity * 0 + 1);
}

// ------   Calculate Rem Based on textBase    ----- /

@mixin rem($props, $rem: 1rem, $breakpoint: lg) {

	@if type-of($props) == list {
		@each $prop in $props {
			#{$prop}: strip-unit($rem) * map-get($PSJ_textBase, $breakpoint);
			#{$prop}: strip-unit($rem) * 1rem;
		}
	}

	@else {
		#{$props}: strip-unit($rem) * map-get($PSJ_textBase, $breakpoint);
		#{$props}: strip-unit($rem) * 1rem;
	}
}

// ------   Retrieve from Nested Map    ------------ /

@function map-deep-get($map, $keys...) {

	@each $key in $keys {
		$map: map-get($map, $key);
	}

	@return $map;
}


// ------   Exponential Functions   ---------------- /
// Supports only integers as exponents for now

@function pow($b, $x) {

	@if type_of($b) != number or type_of($x) != number or not unitless($b) or not unitless($x) {
		@warn 'Both arguments must be unitless numbers.';
		@return $b;
	}

	@else {

		@if round($x) != $x {
			@warn '#{ $x } must be an integer.';
			@return $b;
		}

		@else {

			@if $x == 0 {
				@return 1;
			}
			@else if $x == 1 {
				@return $b;
			}
			@else if $x > 0 and $x < 1 {
				@return ln($x * ln($b));
			}
			@else {
				$y: $b;
				@for $i from 1 to abs($x) {
					$y: $y * $b;
				}
				@if $x < 0 {
					@return 1 / ($y);
				}
				@else {
					@return $y;
				}
			}
		}
	}
}


// ------   Natural Logrithmic Functions   --------- /
// Who in the hell thought it would ever come to needing Taylor series expansion in sass!?

@function ln($x) {

	@if type_of($x) != number or not unitless($x) {
		@warn 'Argument must be a unitless number';
		@return $b;
	}

	$originalx: $x;

	@if abs($x) > 1 {
		$x: 1 / $x;
	}

	$t: $x - 1;

	$y: $t;

	@for $i from 2 to round($x + 150) {
		@if $i % 2 != 0 {
			$y: $y + (pow($t, $i) / $i);
		}

		@else {
			$y: $y - (pow($t, $i) / $i);
		}
	}

	@if abs($originalx) > 1 {
		@return $y * -1;
	}

	@else {
		@return $y;
	}
}


// ------   Rounding Decimals   -------------------- /

@function round-decimal($number, $places: 0, $mode: round) {

	$n: 1;

	// $number must be a number
	@if type-of($number) != number {
		@warn '#{ $number } must be a number';
		@return $number;
	}

	// $places must be a unitless number
	@if type-of($places) != number or not unitless($places) {
		@warn '#{ $places } must be a unitless number';
		@return $number;
	}

	@for $i from 1 through $places {
		$n: $n * 10;
	}

	@if $mode == round {
		@return round($number * $n) / $n;
	}

	@else if $mode == ceil {
		@return ceil($number * $n) / $n;
	}

	@else if $mode == floor {
		@return floor($number * $n) / $n;
	}

	@else {
		@warn '#{ $mode } is not a recognized mode of rounding.';
		@return $number;
	}
}


// ------   Retrieving Colors   -------------------- /

@function color($color) {
	@if map-has-key($PSJ_colorMap, $color) {

		@if map-has-key(map-get($PSJ_colorMap, $color), value) {
			@return map-deep-get($PSJ_colorMap, $color, value);
		}

		@else {
			@warn '#{ $color } does not have a value assigned to it in your color map';
		}
	}

	@else {
		@warn '#{ $color } is not defined in your color map';
	}
}
