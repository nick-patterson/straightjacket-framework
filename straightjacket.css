/* DESCRIPTION: -------------------------------------/

   A lightweight and powerful framework designed
   for maximum customizability. 

   Straightjacket aims to substantiate complex css
   into a system of awesome features and functions
   that are presented as a collection of modules.

   Straightjacket's modules can be created, destroyed,
   duplicated, and modified at your will to suit the
   project at hand. Tweak your configurations to
   perfection or just jump right in and start firing
   off some defaults. It's all up to you.

   In order to keep your code clean and your project
   fast, Straightjacket makes no assumptions and
   will not act unless called upon, thus keeping
   all of the power where it belongs: in the
   hands of the developer.

/-------------------------------------------------- */
/* VERSION: 1.0 ------------------------------------ /
/- RELEASE: JULY 3, 2015 --------------------------- /
/- AUTHOR: NICK PATTERSON (PHANTASM) AT 15FOUR ----- /

/- PHANTASM: Phantasmcs.net ------------------------ /
/- 15FOUR: 15four.com ------------------------------ /
/-------------------------------------------------- */
/* TABLE OF CONTENTS ------------------------------- /
/-
/- #0 Global Proportions --------------------------- /
/- #1 Mixins --------------------------------------- /
/- #2 Colors --------------------------------------- /
/- #3 Structure ------------------------------------ /
/- #4 Text ----------------------------------------- /
/- #5 Buttons -- WORK IN PROGRESS ------------------ /
/- #6 General Helpers ------------------------------*/
/*@function psj_responsiveTextRatio($viewPortWidth, $element, $property) {

	@if $property == font-size {

		@each $textElement, $sizeMap in map-get($psj_text, textElements) {

			@if $element == $textElement {

				$psj_breakpointsList: map_keys(map-get($psj_text, breakpoints));
				$psj_breakpintsListSize: length($psj_breakpointsList);

				@each $size, $breakWidth in map-get($psj_text, breakpoints) {

					@if $viewPortWidth < $breakWidth or $viewPortWidth == $breakWidth {

						$ratio: $viewPortWidth / $breakWidth;

						@if $breakWidth == 0 {
							$ratio: 1;
						}

						@return $ratio * map-get(map-get(map-get($psj_text, textElements), $element), $size);
					}

					@if $viewPortWidth > map-get(map-get($psj_text, breakpoints), nth($psj_breakpointsList, $psj_breakpintsListSize)) {

						@return map-get(map-get(map-get($psj_text, textElements), $element), nth($psj_breakpointsList, $psj_breakpintsListSize));
					}
				}
			}
		}

	@return 1;

	}

	@if $property == line-height {

		@each $size, $breakWidth in map-get($psj_text, breakpoints) {

			@if $viewPortWidth < $breakWidth or $viewPortWidth == $breakWidth {

				$ratio: $viewPortWidth / $breakWidth;

				@if $breakWidth == 0 {
					$ratio: 1;
				}

				@if $element == p {
					@return $psj_bodyLineHeight + (.055 * ($ratio * map-get(map-get($psj_text, lineHeights), $size)) + .003);
				}

				@else {
					@return 1.2 - (.08 * ($ratio / (map-get(map-get(map-get($psj_text, textElements), $element), $size)) * map-get(map-get($psj_text, lineHeights), $size)) + .005);
				}				
			}

			@if $viewPortWidth > 1200 {
				@return 1.2 - (.08 * (1 / (map-get(map-get(map-get($psj_text, textElements), $element), $size)) * map-get(map-get($psj_text, lineHeights), $size)) + .005);
			}
		}
	}

	@if $property == margin-bottom {

		@each $size, $breakWidth in map-get($psj_text, breakpoints) {

			@if $viewPortWidth < $breakWidth or $viewPortWidth == $breakWidth {

				$ratio: $viewPortWidth / $breakWidth;

				@if $breakWidth == 0 {
					$ratio: 1;
				}

				@if $element == p {
					@return 2.7 + (.095 * ($ratio * map-get(map-get($psj_text, margins), $size)) - .023);
				}

				@else {
					@return .75;
				}				
			}

			@else {
				@return .75;
			}
		}
	}	
}*/
.grid {
  clear: both; }

.grid [class*="column"] {
  float: left; }

.row {
  clear: both; }

.grid .float-left, .float-left {
  float: left; }

.grid .float-right, .float-right {
  float: right; }

.grid .clear-left, .clear-left {
  clear: left; }

.grid .clear-right, .clear-right {
  clear: right; }

.grid .clear-both, .clear-both {
  clear: both; }

.grid .centered, .centered {
  float: none;
  margin-left: auto;
  margin-right: auto; }

.container {
  width: 90%;
  padding: 0 20px;
  margin: 0 auto; }

@media (min-width: 480px) {
  .container {
    width: 90%; } }
@media (min-width: 768px) {
  .container {
    width: 718px; } }
@media (min-width: 992px) {
  .container {
    width: 940px; } }
@media (min-width: 1200px) {
  .container {
    width: 1080px; } }
.grid {
  margin-left: -20px; }
  .grid:after {
    content: "Expect Awesome // Create. Amazing.";
    visibility: hidden;
    display: block;
    text-align: center;
    height: 0px;
    clear: both; }

.grid [class*="column"] {
  padding-left: 20px; }

.grid .column-1 {
  width: 8.33333%; }

.grid .column-2 {
  width: 16.66667%; }

.grid .column-3 {
  width: 25%; }

.grid .column-4 {
  width: 33.33333%; }

.grid .column-5 {
  width: 41.66667%; }

.grid .column-6 {
  width: 50%; }

.grid .column-7 {
  width: 58.33333%; }

.grid .column-8 {
  width: 66.66667%; }

.grid .column-9 {
  width: 75%; }

.grid .column-10 {
  width: 83.33333%; }

.grid .column-11 {
  width: 91.66667%; }

.grid .column-12 {
  width: 100%; }

@media (min-width: 480px) {
  .grid .sm-1 {
    width: 8.33333%; }

  .grid .sm-2 {
    width: 16.66667%; }

  .grid .sm-3 {
    width: 25%; }

  .grid .sm-4 {
    width: 33.33333%; }

  .grid .sm-5 {
    width: 41.66667%; }

  .grid .sm-6 {
    width: 50%; }

  .grid .sm-7 {
    width: 58.33333%; }

  .grid .sm-8 {
    width: 66.66667%; }

  .grid .sm-9 {
    width: 75%; }

  .grid .sm-10 {
    width: 83.33333%; }

  .grid .sm-11 {
    width: 91.66667%; }

  .grid .sm-12 {
    width: 100%; } }
@media (min-width: 768px) {
  .grid .md-1 {
    width: 8.33333%; }

  .grid .md-2 {
    width: 16.66667%; }

  .grid .md-3 {
    width: 25%; }

  .grid .md-4 {
    width: 33.33333%; }

  .grid .md-5 {
    width: 41.66667%; }

  .grid .md-6 {
    width: 50%; }

  .grid .md-7 {
    width: 58.33333%; }

  .grid .md-8 {
    width: 66.66667%; }

  .grid .md-9 {
    width: 75%; }

  .grid .md-10 {
    width: 83.33333%; }

  .grid .md-11 {
    width: 91.66667%; }

  .grid .md-12 {
    width: 100%; } }
@media (min-width: 992px) {
  .grid .lg-1 {
    width: 8.33333%; }

  .grid .lg-2 {
    width: 16.66667%; }

  .grid .lg-3 {
    width: 25%; }

  .grid .lg-4 {
    width: 33.33333%; }

  .grid .lg-5 {
    width: 41.66667%; }

  .grid .lg-6 {
    width: 50%; }

  .grid .lg-7 {
    width: 58.33333%; }

  .grid .lg-8 {
    width: 66.66667%; }

  .grid .lg-9 {
    width: 75%; }

  .grid .lg-10 {
    width: 83.33333%; }

  .grid .lg-11 {
    width: 91.66667%; }

  .grid .lg-12 {
    width: 100%; } }
@media (min-width: 1200px) {
  .grid .xl-1 {
    width: 8.33333%; }

  .grid .xl-2 {
    width: 16.66667%; }

  .grid .xl-3 {
    width: 25%; }

  .grid .xl-4 {
    width: 33.33333%; }

  .grid .xl-5 {
    width: 41.66667%; }

  .grid .xl-6 {
    width: 50%; }

  .grid .xl-7 {
    width: 58.33333%; }

  .grid .xl-8 {
    width: 66.66667%; }

  .grid .xl-9 {
    width: 75%; }

  .grid .xl-10 {
    width: 83.33333%; }

  .grid .xl-11 {
    width: 91.66667%; }

  .grid .xl-12 {
    width: 100%; } }
.grid .push-1 {
  margin-left: 8.33333%; }

.grid .push-2 {
  margin-left: 16.66667%; }

.grid .push-3 {
  margin-left: 25%; }

.grid .push-4 {
  margin-left: 33.33333%; }

.grid .push-5 {
  margin-left: 41.66667%; }

.grid .push-6 {
  margin-left: 50%; }

.grid .push-7 {
  margin-left: 58.33333%; }

.grid .push-8 {
  margin-left: 66.66667%; }

.grid .push-9 {
  margin-left: 75%; }

.grid .push-10 {
  margin-left: 83.33333%; }

.grid .push-11 {
  margin-left: 91.66667%; }

/*# sourceMappingURL=straightjacket.css.map */
